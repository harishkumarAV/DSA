-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Traversals:


      The tree is a non-linear data structure, unlike Linked List and Arrays.
It is a hierarchical data structure that can be traversed 
in the following ways :
       1. Inorder Traversal.
       2. Preorder Traversal.
       3. Postorder Traversal.
       4. Level Order Traversal.


To Understand traversal.. Let's consider a tree with values 1,2,3,4,5,6 
     1
  /    \
  2      3
/  \    /
4   5  6








1. Inorder Traversal:
  Inorder Traversal is one of the tree traversals in which the left subtree is visited first then
visit the root and then the right subtree is visited.
Advantages : We get increasing order. If we reverse we get Decreasing order.
The traversal orde becomes : 4 2 5 1 6 3 

Syntax : 

class Node{
  int val;
  Node left,right;
  Node(int data){
    this.val = val;
    left,right = null;
  }
}
class main{
  public void inorder(Node curr , List<Integer> inord){
    if(curr == null){
      return;
    }
    inorder(curr.left,inord);
    inord.add(curr.data);
    inorder(curr.right,inord);
  }





2. Preorder Traversal:
  Preorder Traversal is one of the tree traversals in which root is visited then the
left subtree is visited and then the right subtree is visited.
main use : to get the copy of the tree, other use to get the prefix expression.
Preorder Traversal - 1 2 4 5 3 6

code:
Class Node{
  int data;
  Node  left,right;
  Node(int data){
  this.data = data;
  left,right = null;
}
class main{
  public void preorder(Node curr,List<Integer> preord){
    if(curr == null){
      return;
    }
    preord.add(curr.data);
    preorder(curr.left , preord);
    preorder(curr.right , preord);
  }
}



3. Postorder Traversal:
 Postorder Traversal is one of the tree traversals in which the left subtree is visited,
then the right subtree is visited, and then the root is visited.
main use : delete the tree (Before deleting the parent we should delete the children first).
other use : for postfix expression.

Postorder Traversal - 4 5 2 6 3 1


code:
Class Node{
  int data;
  Node  left,right;
  Node(int data){
  this.data = data;
  left,right = null;
}
class main{
  public void posstorder(Node curr,List<Integer> postord){
    if(curr == null){
      return;
    }
    postorder(curr.left , postord);
    postorder(curr.right , postord);
    postord.add(curr.data);
  }
}




4. Level order Traversal:
In this traversal every node in the tree is visited level by level.
level order traversal is actually breadth first search.Finding connected components in a graph
data structure.


Level Order Traversal - 1 2 3 4 5 6

code:
public List<List<Integer>> levelOrder(TreeNode root) {
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
        
        if(root == null) return wrapList;
        
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i=0; i<levelNum; i++) {
                if(queue.peek().left != null) queue.offer(queue.peek().left);
                if(queue.peek().right != null) queue.offer(queue.peek().right);
                subList.add(queue.poll().val);
            }
            wrapList.add(subList);
        }
        return wrapList;
    }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
